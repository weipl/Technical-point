#每个指令必须有分号结束
#user  nobody;		#配置用户或者组,默认为nobody nobody
#允许生成的进程数,默认是1
worker_processes  1;	

#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;		#指定nginx进程运行文件存放地址


events {
    #accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    #multi_accept on;  	#设置一个进程是否同时接受多个网络连接，默认为off
    #use epoll;      	#事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;
}


http {
 	#文件扩展名与文件类型映射表
    include       mime.types;
    #默认文件类型，默认为text/plain
    default_type  application/octet-stream;
	#自定义格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
	#access_log off; 	#取消服务日志 
    #access_log  logs/access.log  main;		 #combined为日志格式的默认值
	#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile        on;
    #tcp_nopush     on;
	#sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    #keepalive_timeout  0;#连接超时时间，默认为75s，可以在http，server，location块。
    keepalive_timeout  65;	

    #gzip  on;

    server {
    	#默认监听80的端口
        listen       80;
        #表示的请求路径
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
        	#root表示 将请求转向到具体的文件夹中
            root   html;
            #表示默认访问的页面
            index  index.html index.htm;
        }

        #error_page  404              /404.html;  #错误页

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    #--------------------------------下面这是百度出来的-----------------------------------------
    #    server {
    #    keepalive_requests 120; #单连接请求上限次数。
    #    listen       4545;   #监听端口
    #    server_name  127.0.0.1;   #监听地址       
    #    location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
    #       #root path;  #根目录
    #       #index vv.txt;  #设置默认页
    #       proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表
    #       deny 127.0.0.1;  #拒绝的ip
    #       allow 172.18.5.54; #允许的ip           
    #    } 
    #}
	#图片服务器
	#可能是电脑的是，用D:\\test或者D:/test
	server {
		listen 80;
		server_name image.jt.com;
		
		location / {
			root   D:\\test;
		}
	}
	#配置nginx负载均衡 1-轮询
	#upstream jt{
	#	#实现IP_hash
	#	#ip_hash;
	#	#max_fails=1 fail_timeout=60s
	#	server localhost weight=6 ;
	#	server localhost weight=3 ;
	#	server localhost weight=1 ;
	#}
	#Linux端复杂均衡配置
		upstream jtLinux{
		#max_fails=1 fail_timeout=60s
		server 192.168.186.129:8091 weight=6 ;
		server 192.168.186.129:8092 weight=3 ;
		server 192.168.186.129:8093 weight=1 ;
		#backup 表示如果配置的服务器都忙时，才启用backup机器.还有down状态,设置之后不能提供访问
		#server  10.1.1.3   max_fails=1   fail_timeout=10s;   #max_fails默认值为1,fail_timeout默认值为10s,max_fails=0表示不做检查
	}
	
	#定义后台管理系统
	server{
		listen 80;
		server_name manage.jt.com;

		location / {
			#proxy_pass http://jtLinux;
			#proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表
			proxy_pass http://localhost:8091;
			#默认值60s, nginx连接到后端服务器的连接超时时间
			proxy_connect_timeout       3; 
			#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间） 
	        proxy_read_timeout          3; 
	        #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据 
	        proxy_send_timeout          3;
	        #proxy_timeout  10m; #默认值为10分钟，nginx接收后端服务器的响应超时时间
		}
	}
	#京淘管理前台系统
	server{
		listen 80;
		server_name www.jt.com;
		location / {
			proxy_pass http://127.0.0.1:8092;
		}
	}

	#配置淡定登陆服务器
	server{
		listen 80;
		server_name sso.jt.com;
		location / {
			proxy_pass http://127.0.0.1:8093;
		}
	}
	#购物车服务器
	server{
		listen 80;
		server_name cart.jt.com;
		location / {
			proxy_pass http://127.0.0.1:8094;
		}
	}

	#订单服务器
	server{
		listen 80;
		server_name order.jt.com;
		location / {
			proxy_pass http://127.0.0.1:8095;
		}
	}
}

#上面是nginx的基本配置，需要注意的有以下几点：

#1、1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址； 2.$remote_user ：用来记录客户端用户名称； 3.$time_local ： 用来记录访问时间与时区；4.$request ： 用来记录请求的url与http协议；

#  5.$status ： 用来记录请求状态；成功是200， 6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；7.$http_referer ：用来记录从那个页面链接访问过来的； 8.$http_user_agent ：记录客户端浏览器的相关信息；

#2、惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。

#3、每个指令必须有分号结束。
